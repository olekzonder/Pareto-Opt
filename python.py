import streamlit as st

from point import Point, Points
from graph import plot_graph
from opt import filter_optimal, Hermeyer, ideal_point, Linear, Threshold

def generate_points(n):
    st.session_state.points = Points()
    st.session_state.points.generate(n)
    return st.session_state.points

def get_points():
    return st.session_state.points

st.set_page_config(
    page_title="–§–ú–ú–†–ê–ó",
    page_icon="ü§†",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "# –í—ã–ø–æ–ª–Ω–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–º–∏—Ä–Ω–æ–≤",
        'Get help': "https://github.com/olekzonder"
    }
)
methods = ['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞', '–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ü–∞—Ä–µ—Ç–æ', 
           '–ú–µ—Ç–æ–¥ –æ–±–æ–±—â—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–ª–∏–Ω–µ–π–Ω–∞—è —Å–≤—ë—Ä—Ç–∫–∞)', 
           '–ú–µ—Ç–æ–¥ –æ–±–æ–±—â—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è –ì–µ—Ä–º–µ–π–µ—Ä–∞)', 
           '–ú–µ—Ç–æ–¥ –ø–æ—Ä–æ–≥–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏', '–ú–µ—Ç–æ–¥ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏']
st.sidebar.write("# –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ –ü–∞—Ä–µ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞")
st.sidebar.write("–ö–î–ó 1.6")
method = st.sidebar.selectbox('## –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', methods)

@st.cache_data
def calculate_w2(w1):
    return 1.0 - w1
match(method):
    case '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞':
        n = st.sidebar.slider('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫', 10, 1000, 100)
        points  = generate_points(n)
        fig = plot_graph(points=points.points)

    case '–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ü–∞—Ä–µ—Ç–æ':
        points = get_points()
        unopt,pareto = filter_optimal(points.points)
        fig = plot_graph(unopt=unopt,pareto=pareto)
    
    case '–ú–µ—Ç–æ–¥ –æ–±–æ–±—â—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–ª–∏–Ω–µ–π–Ω–∞—è —Å–≤—ë—Ä—Ç–∫–∞)':
        points = get_points()
        unopt,pareto = filter_optimal(points.points)
        w1 = st.sidebar.slider('–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –ø–µ—Ä–≤–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è', 0.0, 1.0, 0.1)
        w2 = calculate_w2(w1)
        st.sidebar.slider("–í–µ—Å –≤—Ç–æ—Ä–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è",0.0,1.0,w2)
        unopt,pareto,optimal = Linear(w1,w2).linear_optimal(unopt,pareto)
        fig = plot_graph(unopt=unopt,pareto=pareto,optimal=optimal)

    case '–ú–µ—Ç–æ–¥ –æ–±–æ–±—â—ë–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è –ì–µ—Ä–º–µ–π–µ—Ä–∞)':
        points = get_points()
        unopt,pareto = filter_optimal(points.points)
        unopt,pareto,optimal = Hermeyer().hermeyer_optimal(unopt,pareto)
        fig = plot_graph(unopt=unopt,pareto=pareto,optimal=optimal)

    case '–ú–µ—Ç–æ–¥ –ø–æ—Ä–æ–≥–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏':
        points = get_points()
        unopt,pareto = filter_optimal(points.points)
        criterion = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π",['f1','f2'])
        if criterion == 'f1':
            threshold = st.sidebar.slider('–í—ã–±–µ—Ä–∏—Ç–µ Œ≥2',0.0,45.0,0.1)
        else:
            threshold = st.sidebar.slider('–í—ã–±–µ—Ä–∏—Ç–µ Œ≥1',0.0,45.0,0.1)
        unopt,pareto,optimal,most_optimal = Threshold(criterion,threshold).threshold_optimal(unopt,pareto)
        fig = plot_graph(unopt=unopt,pareto=pareto,optimal=optimal,most_optimal=most_optimal)

    case '–ú–µ—Ç–æ–¥ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏':
        points = get_points()
        unopt,pareto = filter_optimal(points.points)
        unopt,pareto,optimal,ideal = ideal_point(points.points,unopt,pareto)
        fig = plot_graph(unopt=unopt,pareto=pareto,optimal=optimal,ideal=ideal)

st.plotly_chart(fig,use_container_width=True)